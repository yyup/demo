<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.test.base.dao.UserDTOMapper" >
  <resultMap id="BaseResultMap" type="com.test.base.model.UserDTO" >
    <id column="hxuuid" property="hxuuid" jdbcType="VARCHAR" />
    <result column="member_nick" property="memberNick" jdbcType="VARCHAR" />
    <result column="member_name" property="memberName" jdbcType="VARCHAR" />
    <result column="member_mobile" property="memberMobile" jdbcType="VARCHAR" />
    <result column="member_pwd" property="memberPwd" jdbcType="VARCHAR" />
    <result column="pattern_lock" property="patternLock" jdbcType="VARCHAR" />
    <result column="member_head" property="memberHead" jdbcType="VARCHAR" />
    <result column="first_char" property="firstChar" jdbcType="CHAR" />
    <result column="member_sex" property="memberSex" jdbcType="CHAR" />
    <result column="member_email" property="memberEmail" jdbcType="VARCHAR" />
    <result column="data_state" property="dataState" jdbcType="CHAR" />
    <result column="created_by" property="createdBy" jdbcType="VARCHAR" />
    <result column="date_created" property="dateCreated" jdbcType="VARCHAR" />
    <result column="updated_by" property="updatedBy" jdbcType="VARCHAR" />
    <result column="date_updated" property="dateUpdated" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    hxuuid, member_nick, member_name, member_mobile, member_pwd, pattern_lock, member_head, 
    first_char, member_sex, member_email, data_state, created_by, date_created, updated_by, 
    date_updated
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from common_member
    where hxuuid = #{hxuuid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from common_member
    where hxuuid = #{hxuuid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.test.base.model.UserDTO" >
    insert into common_member (hxuuid, member_nick, member_name, 
      member_mobile, member_pwd, pattern_lock, 
      member_head, first_char, member_sex, 
      member_email, data_state, created_by, 
      date_created, updated_by, date_updated
      )
    values (#{hxuuid,jdbcType=VARCHAR}, #{memberNick,jdbcType=VARCHAR}, #{memberName,jdbcType=VARCHAR}, 
      #{memberMobile,jdbcType=VARCHAR}, #{memberPwd,jdbcType=VARCHAR}, #{patternLock,jdbcType=VARCHAR}, 
      #{memberHead,jdbcType=VARCHAR}, #{firstChar,jdbcType=CHAR}, #{memberSex,jdbcType=CHAR}, 
      #{memberEmail,jdbcType=VARCHAR}, #{dataState,jdbcType=CHAR}, #{createdBy,jdbcType=VARCHAR}, 
      #{dateCreated,jdbcType=VARCHAR}, #{updatedBy,jdbcType=VARCHAR}, #{dateUpdated,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.test.base.model.UserDTO" >
    insert into common_member
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="hxuuid != null" >
        hxuuid,
      </if>
      <if test="memberNick != null" >
        member_nick,
      </if>
      <if test="memberName != null" >
        member_name,
      </if>
      <if test="memberMobile != null" >
        member_mobile,
      </if>
      <if test="memberPwd != null" >
        member_pwd,
      </if>
      <if test="patternLock != null" >
        pattern_lock,
      </if>
      <if test="memberHead != null" >
        member_head,
      </if>
      <if test="firstChar != null" >
        first_char,
      </if>
      <if test="memberSex != null" >
        member_sex,
      </if>
      <if test="memberEmail != null" >
        member_email,
      </if>
      <if test="dataState != null" >
        data_state,
      </if>
      <if test="createdBy != null" >
        created_by,
      </if>
      <if test="dateCreated != null" >
        date_created,
      </if>
      <if test="updatedBy != null" >
        updated_by,
      </if>
      <if test="dateUpdated != null" >
        date_updated,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="hxuuid != null" >
        #{hxuuid,jdbcType=VARCHAR},
      </if>
      <if test="memberNick != null" >
        #{memberNick,jdbcType=VARCHAR},
      </if>
      <if test="memberName != null" >
        #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="memberMobile != null" >
        #{memberMobile,jdbcType=VARCHAR},
      </if>
      <if test="memberPwd != null" >
        #{memberPwd,jdbcType=VARCHAR},
      </if>
      <if test="patternLock != null" >
        #{patternLock,jdbcType=VARCHAR},
      </if>
      <if test="memberHead != null" >
        #{memberHead,jdbcType=VARCHAR},
      </if>
      <if test="firstChar != null" >
        #{firstChar,jdbcType=CHAR},
      </if>
      <if test="memberSex != null" >
        #{memberSex,jdbcType=CHAR},
      </if>
      <if test="memberEmail != null" >
        #{memberEmail,jdbcType=VARCHAR},
      </if>
      <if test="dataState != null" >
        #{dataState,jdbcType=CHAR},
      </if>
      <if test="createdBy != null" >
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="dateCreated != null" >
        #{dateCreated,jdbcType=VARCHAR},
      </if>
      <if test="updatedBy != null" >
        #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="dateUpdated != null" >
        #{dateUpdated,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.test.base.model.UserDTO" >
    update common_member
    <set >
      <if test="memberNick != null" >
        member_nick = #{memberNick,jdbcType=VARCHAR},
      </if>
      <if test="memberName != null" >
        member_name = #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="memberMobile != null" >
        member_mobile = #{memberMobile,jdbcType=VARCHAR},
      </if>
      <if test="memberPwd != null" >
        member_pwd = #{memberPwd,jdbcType=VARCHAR},
      </if>
      <if test="patternLock != null" >
        pattern_lock = #{patternLock,jdbcType=VARCHAR},
      </if>
      <if test="memberHead != null" >
        member_head = #{memberHead,jdbcType=VARCHAR},
      </if>
      <if test="firstChar != null" >
        first_char = #{firstChar,jdbcType=CHAR},
      </if>
      <if test="memberSex != null" >
        member_sex = #{memberSex,jdbcType=CHAR},
      </if>
      <if test="memberEmail != null" >
        member_email = #{memberEmail,jdbcType=VARCHAR},
      </if>
      <if test="dataState != null" >
        data_state = #{dataState,jdbcType=CHAR},
      </if>
      <if test="createdBy != null" >
        created_by = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="dateCreated != null" >
        date_created = #{dateCreated,jdbcType=VARCHAR},
      </if>
      <if test="updatedBy != null" >
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="dateUpdated != null" >
        date_updated = #{dateUpdated,jdbcType=VARCHAR},
      </if>
    </set>
    where hxuuid = #{hxuuid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.test.base.model.UserDTO" >
    update common_member
    set member_nick = #{memberNick,jdbcType=VARCHAR},
      member_name = #{memberName,jdbcType=VARCHAR},
      member_mobile = #{memberMobile,jdbcType=VARCHAR},
      member_pwd = #{memberPwd,jdbcType=VARCHAR},
      pattern_lock = #{patternLock,jdbcType=VARCHAR},
      member_head = #{memberHead,jdbcType=VARCHAR},
      first_char = #{firstChar,jdbcType=CHAR},
      member_sex = #{memberSex,jdbcType=CHAR},
      member_email = #{memberEmail,jdbcType=VARCHAR},
      data_state = #{dataState,jdbcType=CHAR},
      created_by = #{createdBy,jdbcType=VARCHAR},
      date_created = #{dateCreated,jdbcType=VARCHAR},
      updated_by = #{updatedBy,jdbcType=VARCHAR},
      date_updated = #{dateUpdated,jdbcType=VARCHAR}
    where hxuuid = #{hxuuid,jdbcType=VARCHAR}
  </update>
</mapper>